sourceDirectory('./functions/dynamic_factor_model', modifiedOnly = FALSE) # for the estimation of dynamic factors
sourceDirectory('./functions/dynamic_model_averaging', modifiedOnly = FALSE, recursive = FALSE)
setwd("/Users/nsaleille/Dropbox/ofpr/scripts")
## functions
library(R.utils)
sourceDirectory('./functions/zoo_utils', modifiedOnly = FALSE)
sourceDirectory('./functions/dynamic_factor_model', modifiedOnly = FALSE) # for the estimation of dynamic factors
sourceDirectory('./functions/dynamic_model_averaging', modifiedOnly = FALSE, recursive = FALSE)
y.hat.dma <- lapply(dma.forecasts, forecasts_to_zoo)
lapply(y.hat.dma, RMSE, outcome)
load('../factors_estimates/factors.RData')
load('../data_clean/outcome.RData')
load('../data_clean/predictors.RData')
load('../data_clean/release.RData')
y.hat.dma <- lapply(dma.forecasts, forecasts_to_zoo)
lapply(y.hat.dma, RMSE, outcome)
sapply(y.hat.dma, RMSE, outcome)
dms.forecasts[[1]]
sapply(dms.forecasts, function(x) x['zoo',]$zoo)
sapply(dms.forecasts, function(x) x['zoo',]$zoo)[[1]]
dms.forecasts[[1]][[1]]
dms.forecasts[[1]][[1]]['zoo',]
dms.forecasts[[1]][[1]]['zoo',]$zoo
sapply(dms.forecasts[[1]], function(x) x['zoo',]$zoo)
sapply(dms.forecasts[[1]], function(x) x[4,])
sapply(dms.forecasts[[1]], function(x) x[4,]$forecast.reference.period)
sapply(dms.forecasts[[1]], function(x) x['zoo',]$zoo)
y.hat.dms <- lapply(dms.forecasts, forecasts_to_zoo, unlist.data = TRUE)
forecasts_to_zoo <- function(forecasts, unlist.data = FALSE){
data <- sapply(forecasts, function(x) x['zoo',]$zoo)
if (unlist.data){
data <- unlist(data)
}
data.zoo <- zoo(data, as.yearqtr(sapply(forecasts, function(x) x[4,]$forecast.reference.period)))
return(data.zoo)
}
y.hat.dms <- lapply(dms.forecasts, forecasts_to_zoo, unlist.data = TRUE)
y.hat.dms
sapply(y.hat.dms, RMSE, outcome)
y.hat.dma <- lapply(dma.forecasts, forecasts_to_zoo)
rmse.dma <- sapply(y.hat.dma, RMSE, outcome)
save(rmse.dma, file = '../rmse/rmse_dma.RData')
y.hat.dms <- lapply(dms.forecasts, forecasts_to_zoo, unlist.data = TRUE)
rmse.dms <- sapply(y.hat.dms, RMSE, outcome)
save(rmse.dms, file = '../rmse/rmse_dms.RData')
results <- list(rmse.rw, rmse.ar, rmse.dfm, rmse.dma, rmse.dms)
rmse <- sapply(results, function(x) x$rmse)
colnames(rmse) <- sapply(results, function(x) x$type)
y.hat.dma <- lapply(dma.forecasts, forecasts_to_zoo)
rmse.dma <- list(rmse = sapply(y.hat.dma, RMSE, outcome), type = 'dma')
save(rmse.dma, file = '../rmse/rmse_dma.RData')
y.hat.dms <- lapply(dms.forecasts, forecasts_to_zoo, unlist.data = TRUE)
rmse.dms <- list(rmse = sapply(y.hat.dms, RMSE, outcome), type = 'dms')
save(rmse.dms, file = '../rmse/rmse_dms.RData')
results <- list(rmse.rw, rmse.ar, rmse.dfm, rmse.dma, rmse.dms)
rmse <- sapply(results, function(x) x$rmse)
colnames(rmse) <- sapply(results, function(x) x$type)
rmse
library(xtable)
cap <- 'Recursive forecast exercise - RMSE from various models'
label <- 'table:rmse'
align <- rep('c', (ncol(rmse) + 1))
rmse.table <- xtable(rmse, caption = cap, label = label, align = align)
print(rmse.table, file = '../tex/tables/rmse.tex')
rmse[,3] / rmse[,2]
1 - rmse[,3] / rmse[,2]
1 - rmse[,4] / rmse[,3]
1 - rmse[,5] / rmse[,3]
mean(1 - rmse[,5] / rmse[,3])
mean(1 - rmse[,4] / rmse[,3])
outcome
which(index(outcome) == '1991 Q2')
outcome[which(index(outcome) == '1991 Q2'):length(outcome)]
plot(outcome[which(index(outcome) == '1991 Q2'):length(outcome)])
y <- plot(outcome[which(index(outcome) == '1991 Q2'):length(outcome)])
par(mar = c(3,5,2,2))
plot(y, col = 'darkred', type = 'l', ylab = ylab, xlab = '', ylim = c(-2, 2), lwd = 1.5)
ylab <- 'GDP growth rate of France'
y <- plot(outcome[which(index(outcome) == '1991 Q2'):length(outcome)])
y <- outcome[which(index(outcome) == '1991 Q2'):length(outcome)]
pdf (file = file, width = 9, height = 6)
plot(y, col = 'darkred', type = 'l', ylab = ylab, xlab = '', ylim = c(-2, 2), lwd = 1.5)
plot(y, col = 'darkred', type = 'l', ylab = ylab, xlab = '', ylim = c(-2, 2), lwd = 2)
file <- './plots/simple_gdp.pdf'
ylab <- 'GDP growth rate of France'
y <- outcome[which(index(outcome) == '1991 Q2'):length(outcome)]
par(mar = c(3,5,2,2))
pdf (file = file, width = 9, height = 6)
plot(y, col = 'darkred', type = 'l', ylab = ylab, xlab = '', ylim = c(-2, 2), lwd = 2)
dev.off ()
setwd("/Users/nsaleille/Dropbox/ofpr/scripts") # chemin perso
file <- './plots/simple_gdp.pdf'
ylab <- 'GDP growth rate of France'
y <- outcome[which(index(outcome) == '1991 Q2'):length(outcome)]
par(mar = c(3,5,2,2))
pdf (file = file, width = 9, height = 6)
plot(y, col = 'darkred', type = 'l', ylab = ylab, xlab = '', ylim = c(-2, 2), lwd = 2)
dev.off ()
file
file <- '../plots/simple_gdp.pdf'
ylab <- 'GDP growth rate of France'
y <- outcome[which(index(outcome) == '1991 Q2'):length(outcome)]
par(mar = c(3,5,2,2))
pdf (file = file, width = 9, height = 6)
plot(y, col = 'darkred', type = 'l', ylab = ylab, xlab = '', ylim = c(-2, 2), lwd = 2)
dev.off ()
plot(y, col = 'darkred', type = 'l', ylab = ylab, xlab = '', ylim = c(-2, 2), lwd = 2)
lines(hline = 0, col = 'black', lwd = 0.5)
plot(y, col = 'darkred', type = 'l', ylab = ylab, xlab = '', ylim = c(-2, 2), lwd = 2)
abline(h = 0, col = 'black', lwd = 0.5)
setwd("/Users/nsaleille/Dropbox/ofpr/scripts") # chemin perso
file <- '../plots/simple_gdp.pdf'
ylab <- 'GDP growth rate of France'
y <- outcome[which(index(outcome) == '1991 Q2'):length(outcome)]
par(mar = c(3,5,2,2))
pdf (file = file, width = 9, height = 6)
plot(y, col = 'darkred', type = 'l', ylab = ylab, xlab = '', ylim = c(-2, 2), lwd = 2)
abline(h = 0, col = 'black', lwd = 0.5)
dev.off ()
load('../data/forecasts/dma_forecasts.RData')
load('../data/forecasts/dms_forecasts.RData')
y.hat.dma <- lapply(dma.forecasts, forecasts_to_zoo)
rmse.dma <- list(rmse = sapply(y.hat.dma, RMSE, outcome), type = 'dma')
save(rmse.dma, file = '../data/rmse/rmse_dma.RData')
y.hat.dms <- lapply(dms.forecasts, forecasts_to_zoo, unlist.data = TRUE)
rmse.dms <- list(rmse = sapply(y.hat.dms, RMSE, outcome), type = 'dms')
save(rmse.dms, file = '../data/rmse/rmse_dms.RData')
y.hat <- list(dma = y.hat.dma, dms = y.hat.dms)
plotGrowth(outcome, y.hat, rainbow(2), file = '../plots/dma_in_sample_fit.pdf')
y.hat
y.hat.dma
y.hat <- list(dma = y.hat.dma[[3]], dms = y.hat.dms[[3]])
plotGrowth(outcome, y.hat, rainbow(2), file = '../plots/dma_in_sample_fit.pdf')
outcome.subset <- outcome[which(index(outcome) == '1991 Q2'):length(outcome)]
plotGrowth(outcome.subset, y.hat, rainbow(2), file = '../plots/dma_in_sample_fit.pdf')
lapply(y.hat, RMSE, outcome)
dma_driving_models(dma$probs, 0.1, file = '../plots/dma_posterior_probabilities.pdf')
y.hat <- list(DMA = y.hat.dma[[1]], DMS = y.hat.dms[[3]])
outcome.subset <- outcome[which(index(outcome) == '1991 Q2'):length(outcome)]
plotGrowth(outcome.subset, y.hat, rainbow(2), file = '../plots/dma_in_sample_fit.pdf')
y.hat <- list(DMA = y.hat.dma[[1]], DMS = y.hat.dms[[1]])
outcome.subset <- outcome[which(index(outcome) == '1991 Q2'):length(outcome)]
plotGrowth(outcome.subset, y.hat, rainbow(2), file = '../plots/dma_in_sample_fit.pdf')
lapply(y.hat, RMSE, outcome)
plotGrowth(outcome.subset, y.hat, c('darkgreen', 'darblue'), file = '../plots/dma_in_sample_fit.pdf')
plotGrowth(outcome.subset, y.hat, c('darkgreen', 'darkblue'), file = '../plots/dma_in_sample_fit.pdf')
require(graphics)
# A Color Wheel
pie(rep(1, 12), col = rainbow(12))
plotGrowth(outcome.subset, y.hat, heat.colors(2), file = '../plots/dma_in_sample_fit.pdf')
plotGrowth(outcome.subset, y.hat, c('darkgreen', 'darkblue'), file = '../plots/dma_in_sample_fit.pdf')
sourceDirectory('./functions/zoo_utils', modifiedOnly = FALSE)
plotGrowth2(outcome.subset, y.hat, c('darkgreen', 'darkblue'), file = '../plots/dma_in_sample_fit.pdf')
plotGrowth(outcome.subset, y.hat[1], heat.colors(1), file = '../plots/dma_in_sample_fit.pdf')
sourceDirectory('./functions/zoo_utils', modifiedOnly = FALSE)
plotGrowth(outcome.subset, y.hat[1], heat.colors(1), file = '../plots/dma_in_sample_fit.pdf')
plotGrowth(outcome.subset, y.hat[1], 'darkblue', file = '../plots/dma_in_sample_fit.pdf')
plotGrowth(outcome.subset, y.hat[2], 'darkblue', file = '../plots/dms_in_sample_fit.pdf')
source('~/Dropbox/ofpr/scripts/main_scripts/04_03_forecasts_dynamic_factor_model_V14.R')
source('~/Dropbox/ofpr/scripts/main_scripts/04_03_forecasts_dynamic_factor_model_V14_monthly.R')
rm(list=ls(all=TRUE))
setwd("/Users/nsaleille/Dropbox/ofpr/scripts") # chemin perso
########### STEP 1 ###################################
########### load dataset  ############################
######################################################
library(R.utils)
sourceDirectory('./functions/zoo_utils', modifiedOnly = FALSE)
sourceDirectory('./functions/extract_data', modifiedOnly = FALSE)
sourceDirectory('./functions/dynamic_factor_model', modifiedOnly = FALSE)
load('../data/data_clean/predictors.RData')
load('../data/data_clean/outcome.RData')
load('../data/data_clean/release.RData')
load('../data/factors_estimates/factors_monthly.RData')
rm(list=ls(all=TRUE))
setwd("/Users/nsaleille/Dropbox/ofpr/scripts") # chemin perso
########### STEP 1 ###################################
########### load dataset  ############################
######################################################
library(R.utils)
sourceDirectory('./functions/zoo_utils', modifiedOnly = FALSE)
sourceDirectory('./functions/extract_data', modifiedOnly = FALSE)
sourceDirectory('./functions/dynamic_factor_model', modifiedOnly = FALSE)
load('../data/data_clean/outcome_sets.RData')
load('../data/data_clean/release.RData')
load('../data/factors_estimates/factors_monthly.RData')
load('../data/data_clean/predictors.RData')
load('../data/data_clean/outcome.RData')
load('../data/data_clean/release.RData')
load('../data/factors_estimates/factors_monthly.RData')
########### STEP 2 ###################################
########### Recursive DFM ############################
######################################################
fs.trim[[1]]
fs.trim[[1]][[1]]
fs.trim[[1]][[1]]$zoo
index(fs.trim[[1]][[1]]$zoo)
as.yearqtr(index(fs.trim[[1]][[1]]$zoo))
M1 <- c("Jan", "Apr", "Jul", "Oct")
M2 <- c("Feb", "May", "Aug", "Nov")
M3 <- c("Mar", "Jun", "Sep", "Dec")
index(fs.trim[[1]][[1]]$zoo) %in% M1
index(fs.trim[[1]][[1]]$zoo)
M1 %in% index(fs.trim[[1]][[1]]$zoo)
require(stringr)
str_detect(M1, index(fs.trim[[1]][[1]]$zoo))
str_detect(M1, as.character(index(fs.trim[[1]][[1]]$zoo)))
as.character(index(fs.trim[[1]][[1]]$zoo))
str_detect(M1[1], as.character(index(fs.trim[[1]][[1]]$zoo)))
M1[1]
str_detect(as.character(index(fs.trim[[1]][[1]]$zoo)), M1[1])
str_detect(as.character(index(fs.trim[[1]][[1]]$zoo)), M1)
ids <- index(fs.trim[[1]][[1]]$zoo)
ids <- index(fs.trim[[1]][[1]]$zoo)
lapply(M1, str_detect, string = as.character(ids))
ids <- lapply(M1, str_detect, string = as.character(ids))
Reduce('+', ids)
index(fs.trim[[1]][[1]]$zoo)
ids <- as.logical(Reduce('+', ids))
ids
ids_detect <- function(serie){
ids <- index(serie)
ids <- lapply(M1, str_detect, string = as.character(ids))
ids <- as.logical(Reduce('+', ids))
return(ids)
}
ids_detect(fs.trim[[1]][[1]]$zoo)
ids_detect <- function(serie, pattern){
ids <- index(serie)
ids <- lapply(pattern, str_detect, string = as.character(ids))
ids <- as.logical(Reduce('+', ids))
return(ids)
}
ids_detect(fs.trim[[1]][[1]]$zoo, M1)
ids_detect(fs.trim[[1]][[1]]$zoo, M2)
ids_detect(fs.trim[[1]][[1]]$zoo, M3)
h
fs.trim[[h]]
h <- 1
fs.trim[[h]]
f <- fs.trim[[h]]
lapply(list(M1, M2, M3), ids_detect, serie = serie)
yearqtr_to_month <- function(serie){
M1 <- c("Jan", "Apr", "Jul", "Oct")
M2 <- c("Feb", "May", "Aug", "Nov")
M3 <- c("Mar", "Jun", "Sep", "Dec")
ids <- lapply(list(M1, M2, M3), ids_detect, serie = serie)
for (i in 1:3){
index(serie)[which(ids[i])] <- paste('M', i, sep = '')
}
return(serie)
}
yearqtr_to_month(fs.trim[[1]][[1]]$zoo)
serie <- fs.trim[[1]][[1]]$zoo
ids_detect(serie)
ids <- lapply(list(M1, M2, M3), ids_detect, serie = serie)
ids
i = 1
which(ids[i])
which(ids[[i]])
yearqtr_to_month <- function(serie){
M1 <- c("Jan", "Apr", "Jul", "Oct")
M2 <- c("Feb", "May", "Aug", "Nov")
M3 <- c("Mar", "Jun", "Sep", "Dec")
ids <- lapply(list(M1, M2, M3), ids_detect, serie = serie)
for (i in 1:3){
index(serie)[which(ids[[i]])] <- paste('M', i, sep = '')
}
return(serie)
}
yearqtr_to_month(fs.trim[[1]][[1]]$zoo)
ids_detect <- function(index, pattern){
require(stringr)
ids <- index
ids <- lapply(pattern, str_detect, string = as.character(ids))
ids <- as.logical(Reduce('+', ids))
return(ids)
}
yearqtr_to_month <- function(index){
M1 <- c("Jan", "Apr", "Jul", "Oct")
M2 <- c("Feb", "May", "Aug", "Nov")
M3 <- c("Mar", "Jun", "Sep", "Dec")
ids <- lapply(list(M1, M2, M3), ids_detect, index = index)
for (i in 1:3){
index[which(ids[[i]])] <- paste('M', i, sep = '')
}
return(index)
}
yearqtr_to_month(index(fs.trim[[1]][[1]]$zoo))
index(fs.trim[[1]][[1]]$zoo)
ids_detect <- function(ind, pattern){
require(stringr)
ids <- ind
ids <- lapply(pattern, str_detect, string = as.character(ids))
ids <- as.logical(Reduce('+', ids))
return(ids)
}
yearqtr_to_month <- function(ind){
M1 <- c("Jan", "Apr", "Jul", "Oct")
M2 <- c("Feb", "May", "Aug", "Nov")
M3 <- c("Mar", "Jun", "Sep", "Dec")
ids <- lapply(list(M1, M2, M3), ids_detect, index = ind)
for (i in 1:3){
ind[which(ids[[i]])] <- paste('M', i, sep = '')
}
return(ind)
}
yearqtr_to_month(index(fs.trim[[1]][[1]]$zoo))
ind <- index(fs.trim[[1]][[1]]$zoo)
require(stringr)
ids <- ind
ids <- lapply(pattern, str_detect, string = as.character(ids))
ids <- as.logical(Reduce('+', ids))
pattern <- M1
ids <- as.logical(Reduce('+', ids))
ids
ids <- ind
ids
ids <- lapply(pattern, str_detect, string = as.character(ids))
ids
Reduce('+', ids)
as.logical(Reduce('+', ids))
ids <- as.logical(Reduce('+', ids))
ids
M1 <- c("Jan", "Apr", "Jul", "Oct")
M2 <- c("Feb", "May", "Aug", "Nov")
M3 <- c("Mar", "Jun", "Sep", "Dec")
ids <- lapply(list(M1, M2, M3), ids_detect, index = ind)
ids <- lapply(list(M1, M2, M3), ids_detect, ind = ind)
ids
for (i in 1:3){
ind[which(ids[[i]])] <- paste('M', i, sep = '')
}
ind
which(ids[[i]])
paste('M', i, sep = '')
ind <- index(fs.trim[[1]][[1]]$zoo)
ind
ind[which(ids[[i]])]
ind[which(ids[[i]])] <- paste('M', i, sep = '')
ind[which(ids[[i]])]
ids <- lapply(list(M1, M2, M3), ids_detect, ind = ind)
ind.new <- c()
for (i in 1:3){
ind.new[which(ids[[i]])] <- paste('M', i, sep = '')
}
return(ind.new)
ind.new
yearqtr_to_month <- function(ind){
M1 <- c("Jan", "Apr", "Jul", "Oct")
M2 <- c("Feb", "May", "Aug", "Nov")
M3 <- c("Mar", "Jun", "Sep", "Dec")
ids <- lapply(list(M1, M2, M3), ids_detect, ind = ind)
ind.new <- c()
for (i in 1:3){
ind.new[which(ids[[i]])] <- paste('M', i, sep = '')
}
return(ind.new)
}
ind <- index(fs.trim[[1]][[1]]$zoo)
yearqtr_to_month(index(fs.trim[[1]][[1]]$zoo))
yearqtr_to_month(index(fs.trim[[1]][[1]]$zoo))
f <- fs.trim[[h]]
months <- lapply(f, function(x) {yearqtr_to_month((index(x$zoo)))})
months
f <- fs.trim[[1]][[1]]$zoo
yearqtr_to_month((index(f$zoo)))
f <- fs.trim[[1]][[1]]$zoo
yearqtr_to_month((index(f$zoo)))
f <- fs.trim[[1]][[1]]
yearqtr_to_month((index(f$zoo)))
f
yearqtr_to_month((index(f$zoo)))
unique(yearqtr_to_month((index(f$zoo))))
m <- yearqtr_to_month((index(f$zoo))
m <- yearqtr_to_month((index(f$zoo)))
m <- yearqtr_to_month((index(f$zoo)))
m
i <- m[1]
i
f[which(m) == i, ]
which(m)
m
f[which(m == i), ]
which(m == i)
f
f$zoo[which(m == i), ]
lapply(unique(m), function(x) f$zoo[which(m == x), ])
vals <- lapply(unique(m), function(x) f$zoo[which(m == x), ])
test <- Reduce(cbind, vals)
test
vals <- lapply(unique(m), function(x) as.matrix(f$zoo[which(m == x), ]))
vals
m
vals <- lapply(unique(m), function(x) as.matrix(f$zoo[which(m == x), ]))
vals
vals <- lapply(unique(m), function(x) as.matrix(f$zoo[which(m == x), ]))
test <- Reduce(cbind, vals)
vals <- lapply(unique(m), function(x) f$zoo[which(m == x), ])
vales
vals
index(f$zoo)
year(index(f$zoo))
months
index(f$zoo)
extract(index(f$zoo))
extract(index(f$zoo), fixed(4))
extract(as.character(index(f$zoo)), fixed(4))
lapply(as.character(index(f$zoo)), function(x) x[1/2])
lapply(as.string(index(f$zoo)), function(x) x[1/2])
vals <- lapply(unique(m), function(x) f$zoo[which(m == x), ])
vals
index(vals[[1]])
as.yearqtr(index(vals[[1]]))
vals <- lapply(unique(m), function(x) f$zoo[which(m == x), ])
vals <- lapply(vals, function(x) {index(x) <- as.yearqtr(index(x)); return(x)})
vals
test <- Reduce(merge, vals)
test
paste(V, 1:ncol(f), sep = '')
paste('V', 1:ncol(f), sep = '')
paste('V', 1:ncol(f$zoo), sep = '')
f <- fs.trim[[1]][[1]]$zoo
m <- yearqtr_to_month((index(f)))
vals <- lapply(unique(m), function(x) f$zoo[which(m == x), ])
vals <- lapply(vals, function(x) {index(x) <- as.yearqtr(index(x)); return(x)})
test <- Reduce(merge, vals)
paste('V', 1:ncol(f), sep = '')
vals <- lapply(unique(m), function(x) f[which(m == x), ])
vals <- lapply(vals, function(x) {index(x) <- as.yearqtr(index(x)); return(x)})
test <- Reduce(merge, vals)
paste('V', 1:ncol(f), sep = '')
months <- paste('M', 1:3)
paste(vars, months)
vars <- paste('V', 1:ncol(f), sep = '')
months <- paste('M', 1:3)
paste(vars, months)
months <- paste('M', 1:3, sep = '')
paste(vars, months)
paste(rep(vars, 3), months)
vars
months
paste(vars, rep(months, ncol(f)))
paste(rep(vars, 3), rep(months, ncol(f)))
paste(rep(vars, ncol(f)), months)
paste(months, rep(vars, ncol(f)))
paste(rep(months, ncol(f)), vars)
months
rep(months, 8)
sort(rep(months, 8))
paste(sort(rep(months, ncol(f))), vars)
f <- fs.trim[[1]][[1]]$zoo
m <- yearqtr_to_month((index(f)))
vals <- lapply(unique(m), function(x) f[which(m == x), ])
vals <- lapply(vals, function(x) {index(x) <- as.yearqtr(index(x)); return(x)})
vals <- Reduce(merge, vals)
vars <- paste('V', 1:ncol(f), sep = '')
months <- paste('M', 1:3, sep = '')
colnames(vals) <- paste(sort(rep(months, ncol(f))), vars)
head(vals)
f <- fs.trim[[h]]
zoo_month_to_trim <- function(serie){
# converts a matrix with monthly observations
# into a matrix with quarterly observations
# each predictor corresonds to a variable and a month
m <- yearqtr_to_month((index(serie)))
vals <- lapply(unique(m), function(x) serie[which(m == x), ])
vals <- lapply(vals, function(x) {index(x) <- as.yearqtr(index(x)); return(x)})
vals <- Reduce(merge, vals)
vars <- paste('V', 1:ncol(serie), sep = '')
months <- paste('M', 1:3, sep = '')
colnames(vals) <- paste(sort(rep(months, ncol(serie))), vars)
return(vals)
}
f <- fs.trim[[h]]
f <- lapply(f, zoo_month_to_trim)
f <- lapply(f, function(x) zoo_month_to_trim(x$zoo))
head(f)
rm(list=ls(all=TRUE))
setwd("/Users/nsaleille/Dropbox/ofpr/scripts") # chemin perso
########### STEP 1 ###################################
########### load dataset  ############################
######################################################
library(R.utils)
sourceDirectory('./functions/zoo_utils', modifiedOnly = FALSE)
sourceDirectory('./functions/extract_data', modifiedOnly = FALSE)
sourceDirectory('./functions/dynamic_factor_model', modifiedOnly = FALSE)
load('../data/data_clean/predictors.RData')
load('../data/data_clean/outcome.RData')
load('../data/data_clean/release.RData')
load('../data/factors_estimates/factors_monthly.RData')
########### STEP 2 ###################################
########### Recursive DFM ############################
######################################################
dfm.forecasts <- list()
for (h in 1:8){
print(paste('forecasts', h, 'months before official GDP release date'))
sets <- build_training_sets(outcome, predictors, release, prop.train = 0.5, n.steps.ahead = h)
fs <- lapply(fs.trim[[h]], function(x) zoo_month_to_trim(x$zoo))
dfm.forecasts[paste('n.ahead =', h)] <- recursive_DFM(sets$outcome, fs)
}
sets <- build_training_sets(outcome, predictors, release, prop.train = 0.5, n.steps.ahead = h)
fs <- lapply(fs.trim[[h]], function(x) zoo_month_to_trim(x$zoo))
dfm.forecasts[paste('n.ahead =', h)] <- recursive_DFM(sets$outcome, fs)
fs
fs <- lapply(fs.trim[[h]], function(x) {x$zoo <- zoo_month_to_trim(x$zoo); return(x)})
fs
dfm.forecasts[paste('n.ahead =', h)] <- recursive_DFM(sets$outcome, fs)
recursive_DFM(sets$outcome, fs)
dfm.forecasts[paste('n.ahead =', h)]
fs <- lapply(fs.trim[[h]], function(x) {x$zoo <- na.omit(zoo_month_to_trim(x$zoo)); return(x)})
dfm.forecasts[paste('n.ahead =', h)] <- recursive_DFM(sets$outcome, fs)
recursive_DFM(sets$outcome, fs)
